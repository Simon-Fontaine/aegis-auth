generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum VerificationType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  ACCOUNT_DELETION
  EMAIL_CHANGE
}

model User {
  id                  String    @id @default(uuid())
  username            String    @unique
  email               String    @unique
  password            String
  pendingEmail        String?   @unique
  isEmailVerified     Boolean   @default(false)
  isBanned            Boolean   @default(false)
  failedLoginAttempts Int       @default(0)
  lockedUntil         DateTime?
  // Additional fields optional
  avatarUrl           String?
  displayName         String?
  roles               String[]
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  sessions      Session[]
  verifications Verification[]

  @@index([email, isBanned])
  @@index([lockedUntil])
  @@map("users")
}

model Session {
  id            String   @id @default(uuid())
  userId        String
  tokenHash     String   @unique
  csrfTokenHash String   @unique
  isRevoked     Boolean  @default(false)
  expiresAt     DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  // Optional device info
  ipAddress     String?
  location      String?
  country       String?
  device        String?
  browser       String?
  os            String?
  userAgent     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expiresAt])
  @@index([isRevoked])
  @@map("sessions")
}

model Verification {
  id        String           @id @default(uuid())
  userId    String
  token     String           @unique
  type      VerificationType
  metadata  Json?
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verifications")
}
